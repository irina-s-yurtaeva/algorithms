<?php

namespace Otus\ex30_DynamicProgramming;

use Otus\Result;
use Otus\PaintUtils;

class OneTwoPeas extends \Otus\Alg
{
	protected PaintUtils $painter;

	public function __construct()
	{
		$this->painter = new PaintUtils();
	}

	public function getName(): string
	{
		return 'Раз-два горох';
	}

	public function apply(): Result
	{
		$result = parent::apply(); // TODO: Change the autogenerated stub
		echo 'Суслик набрал себе a/b гороха, а Хомяк c/d. Введите дробные числа в формате a/b, но сумма введенных значений не долэна превышать 1. ' . PHP_EOL;
		$A = [0, 0];
		while ($A[0] <= 0 || $A[1] <= 0)
		{
			$buff = readline('Сколько собрал Суслик? Введите в формате a/b: ');
			$A = explode('/', $buff);
			if ($A[0] <= 0 || $A[1] <= 0)
			{
				echo 'Введена некорректная дробь. Исправьте, пожалуйста. ' . PHP_EOL;
			}
		}
		$B = [0, 0];
		while ($B[0] <= 0 || $B[1] <= 0)
		{
			$buff = readline('Сколько собрал Хомяк? Введите в формате c/d: ');
			$B = explode('/', $buff);
			if ($B[0] <= 0 || $B[1] <= 0)
			{
				echo 'Введена некорректная дробь. Исправьте, пожалуйста. ' . PHP_EOL;
			}
		}

		$data = [
			$A[0] * $B[1] + $B[0] * $A[1],
			$A[1] * $B[1]
		];

		if ($data[0] > $data[1])
		{
			echo 'Введены некорректные данные, так как сумма больше введенных значений превышает единицу.' . PHP_EOL;
			$result->addError(new \Error('Введены некорректные данные: число превышает единицу'));
		}

		echo 'Исходная дробь: ' . $data[0] . '/' . $data[1  ] . PHP_EOL;

		$gcds = [];
		do
		{
			$gcd = $this->gcd($data[0], $data[1]);
			$gcds[] = $gcd;
			$data[0] /= $gcd;
			$data[1] /= $gcd;
		} while ($gcd > 1);

		echo 'Сокращенная дробь: ' . $data[0] . '/' . $data[1] . PHP_EOL;
		echo 'Наибольшие общие делители: ' . implode(', ', $gcds) . PHP_EOL;
		$result->setData($data);

		return $result;
	}

	protected function gcd(int $a, int $b): int
	{
		if ($a === $b)
		{
			return $a;
		}
		else if ($a <= 0)
		{
			return $b;
		}
		else if ($b <= 0)
		{
			return $a;
		}
		else if ($a % 2 === 0 && $b % 2 === 0)
		{
			return $this->gcd($a >> 1, $b >> 1) << 1;
		}
		else if ($a % 2 === 0)
		{
			return $this->gcd($a >> 1, $b);
		}
		else if ($b % 2 === 0)
		{
			return $this->gcd($a, $b >> 1);
		}
		else if ($a > $b)
		{
			return $this->gcd($a - $b, $b);
		}
		else
		{
			return $this->gcd($a, $b - $a);
		}
	}
}
