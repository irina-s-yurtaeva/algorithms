<?php

namespace Otus\ex30_DynamicProgramming;

use Otus\PaintUtils;
use Otus\Result;

class FirTree extends \Otus\Alg
{
	protected PaintUtils $painter;

	public function __construct()
	{
		$this->painter = new PaintUtils();
	}

	public function getName(): string
	{
		return 'Ёлочка (fir tree)';
	}

	public function apply(): Result
	{
		$result = parent::apply(); // TODO: Change the autogenerated stub
		$numbers = [];
		if (false)
		{
			echo 'Введите числа, из которых будет выстроена ёлочка, разделённые пробелом. ' . PHP_EOL;
			$numbers = explode(' ', readline('Числа: '));
		}
		if (count($numbers) <= 0)
		{
			echo 'Будет использоваться демонстрационный набор ' . PHP_EOL;
			$numbers = $this->getDemoData();
		}
		$rowsCount = $this->findN(count($numbers));

		//region just draw a tree
		$numberLength = strlen(max($numbers)) + 2;
		$stringLength = $numberLength * $rowsCount;
		$numbersToDraw = $numbers;
		echo $this->painter->colorFont([0, 102, 0]);
		for ($i = 1; $i <= $rowsCount; $i++)
		{
			$draw = [];
			for ($j = 1; $j <= $i; $j++)
			{
				$number = array_shift($numbersToDraw);
				$draw[] = str_pad($number, $numberLength, ' ', STR_PAD_BOTH);
			}
			echo str_pad(implode('', $draw), $stringLength, ' ', STR_PAD_BOTH) . PHP_EOL;
		}
		echo $this->painter->resetColor();
		//endregion

		echo 'Максимальная сумма: ' . $this->findTheWay($rowsCount, $numbers) . PHP_EOL;

		return $result;
	}

	protected function findN(int $summ): int
	{
		$result = 0;
		for ($n = 1; $n < $summ / 2; $n++)
		{
			$buff = 0.5 * (1 + $n) * $n;
			if ($buff <= $summ)
			{
				$result = $n;
			}
			else
			{
				break;
			}
		}

		return $result;
	}

	protected function findTheWay($count, $numbers): int
	{
		for ($level = $count - 2; $level >= 0; $level--)
		{
			$elementNumber = 0.5 * (1 + $level) * $level;
			$elementNextLevelNumber = $elementNumber + $level + 1;
			for ($j = 0; $j <= $level; $j++)
			{
				$numbers[$elementNumber + $j] += max(
					$numbers[$elementNextLevelNumber + $j],
					$numbers[$elementNextLevelNumber + $j + 1]
				);
			}
		}

		return $numbers[0];
	}

	protected function getDemoData(): array
	{
		return [1, 2, 3, 4, 5, 6, 9, 8, 0, 3];
	}
}
